//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TFX.Core;
using TFX.Core.Model;
using TFX.Core.Services;
using TFX.Core.Reflections;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.Extensions.DependencyInjection;
using TFX.Core.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Data;
using TFX.Core.Lzma;
using TFX.Core.Identity;
using System.Text;
using TFX.App.INF.Servisses.Rules;
using TFX.App.MDL.Servisses;
using TFX.App.RLE.Servisses.Rules;

namespace TFX.App.INF.Servisses
{
    [XGuid("EC76DA97-6329-4BC3-B446-3609F2CC807B", typeof(IRequestTestService))]
    public class RequestTestService : XService, IRequestTestService
    {
        public class DBContext : XDBContext
        {
            public DBContext(DbContextOptions<DBContext> pOptions, XITenantProvider pTenantProvider)
                   : base(pOptions, pTenantProvider)
            {
            }



            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                base.OnModelCreating(pBuilder);
            }
        }

        public abstract class BaseINFRequestTestServiceRule : XServiceINFRule<RequestTestService, RequestTestTuple>
        {
            public BaseINFRequestTestServiceRule(RequestTestService pService)
                : base(pService)
            {
            }
            protected DBContext Context
            {
                get;
                private set;
            }
            protected internal virtual T GetWhere<T>(T pQuery)
            {
                return pQuery;
            }
            internal void SetContext(DBContext pContext)
            {
                Context = pContext;
            }

            public virtual RequestTestDataSet Execute()
            {
                return null;
            }

            public virtual ResultFields EndPoint(PayloadFields pData)
            {
                return ((BaseRequestTestRule)Service.Rule).EndPoint(pData);
            }
        }

        public RequestTestService(ILogger<XService> pLogger, DBContext pContext)
               :base(pLogger)
        {
            Rule = new RequestTestRule(this);
            _INFRule = new INFRequestTestServiceRule(this);
            Context = pContext;
            _INFRule.SetContext(Context);
        }

        internal XIServiceRule<RequestTestTuple, RequestTestTuple> Rule;
        private INFRequestTestServiceRule _INFRule;

        public override Guid ID => new Guid("EC76DA97-6329-4BC3-B446-3609F2CC807B");

        public DBContext Context
        {
            get;
        }

        public override void GracefullyClose()
        {
            Context.Commit();
        }
        public RequestTestDataSet Execute()
        {
            Context.BeginTransaction();
            return _INFRule.Execute();
            Context.Commit();
        }

        public virtual ResultFields EndPoint(PayloadFields pData)
        {
            try
            {
                Context.BeginTransaction();
                return _INFRule.EndPoint(pData);
            }
            catch
            {
                Context.Rollback();
                throw;
            }
            finally
            {
                Context.Commit();
            }
        }
    }
}